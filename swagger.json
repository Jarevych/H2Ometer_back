{
  "openapi": "3.0.0",
  "info": {
    "title": "H2Ometer",
    "version": "1.0.0",
    "description": "H2Ometer is an application designed to calculate the daily water consumption norm.<br>The app allows users to monitor their water intake, taking into account the time and quantity of fluid consumed.<br>The H2Ometer project enables users to conveniently and efficiently keep track of and control their daily water consumption."
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "http://localhost:3001"
    },
    {
      "url": "https://github.com/Jarevych/H2Ometer_back"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints user authentication"
    },
    {
      "name": "User",
      "description": "Endpoint user"
    },

    {
      "name": "Water",
      "description": "Endpoints for water data"
    },
    {
      "name": "Today&Month",
      "description": "Endpoint of all consumption by the user for the selected day & month"
    }
  ],

  "paths": {
    "/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Endpoint for user registration",
        "tags": ["Auth"],
        "security": [],
        "requestBody": {
          "description": "User registration details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "example": {
                  "email": "user@example.com",
                  "name": "User Name"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "error": "Invalid registration details"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "example": {
                  "error": "Email already in use"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "User login",
        "description": "Endpoint for user login",
        "tags": ["Auth"],
        "security": [],
        "requestBody": {
          "description": "User login details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "example": {
                  "token": "eyJhbGciOiJIUzI1NiIsIn..."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "error": "Invalid login details"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "Email or password is wrong"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "summary": "User logout",
        "description": "Endpoint for user logout",
        "tags": ["Auth"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout success",
            "content": {
              "application/json": {
                "example": {
                  "message": "Logout success"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "Invalid or expired token"
                }
              }
            }
          }
        }
      }
    },
    "/forgot-password": {
      "post": {
        "summary": "Request user password reset",
        "description": "Endpoint for requesting a password reset",
        "tags": ["Auth"],
        "requestBody": {
          "description": "Email details for password reset",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailDetails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email for password reset sent",
            "content": {
              "application/json": {
                "example": {
                  "message": "Email for password reset sent"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "User not found"
                }
              }
            }
          }
        }
      }
    },
    "/reset-password/{token}": {
      "post": {
        "summary": "Reset user password",
        "description": "Endpoint for resetting user password",
        "tags": ["Auth"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Token received for password reset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New password details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPasswordDetails"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully reset",
            "content": {
              "application/json": {
                "example": {
                  "message": "Password successfully reset"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "error": "Invalid or expired token"
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "summary": "Get current user information",
        "description": "Endpoint information about the current user",
        "tags": ["User"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "example": {
                  "email": "user@example.com",
                  "name": "User Name",
                  "gender": "male or famale",
                  "avatar": "https://example.com/avatar.jpg"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "error": "Access denied. Token not provided or Invalid token"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "error": "Internal Server Error or specific error message"
                }
              }
            }
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "summary": "Update user information",
        "tags": ["User"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "Bearer <token>"
            },
            "description": "JWT token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserInformation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "example": {
                  "code": 200,
                  "data": {},
                  "message": "User updated successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "error": "Invalid userId format or validation error details"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "example": {
                  "error": "User with ID not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "error": "Internal Server Error or specific error message"
                }
              }
            }
          }
        }
      }
    },
    "/users/avatar": {
      "post": {
        "summary": "Upload user avatar",
        "description": "Endpoint for uploading and updating user avatar.",
        "tags": ["User"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar updated successfully",
            "content": {
              "application/json": {
                "example": {
                  "message": "Avatar updated successfully",
                  "avatarURL": "https://example.com/avatar.jpg"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Missing fields"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "message": "Access denied. Token not provided or Invalid token"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "error": "Internal Server Error or specific error message"
                }
              }
            }
          }
        }
      }
    },
    "/users/{ownerId}/water-data": {
      "get": {
        "summary": "Get water data for a specific user",
        "description": "Endpoint for retrieving water consumption data for a specific user",
        "tags": ["Today&Month"],
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectId"
            }
          },
          {
            "name": "day",
            "in": "query",
            "description": "Day to retrieve data for (use 'today' for the current day)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month to retrieve data for (use 'currentMonth' for the current month)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Water data retrieved successfully",
            "content": {
              "application/json": {
                "example": {
                  "ownerId": "userId",
                  "day": "dayValue",
                  "month": "monthValue",
                  "waterData": [
                    {
                      "time": "10:00 AM",
                      "amount": 500
                    },
                    {
                      "time": "02:00 PM",
                      "amount": 300
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No data found",
            "content": {
              "application/json": {
                "example": {
                  "message": "No data found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Server error"
                }
              }
            }
          }
        }
      }
    },
    "/api/water-intake": {
      "post": {
        "summary": "Create a new water intake record",
        "parameters": [],
        "description": "Endpoint for create new record of intake water",
        "tags": ["Water"],
        "requestBody": {
          "description": "Create record of intake water",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWaterIntake"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Record created successfully",
            "content": {
              "application/json": {
                "example": {
                  "day": "1/2/2024",
                  "ownerId": "65b9566c5216d264a04e71ec",
                  "waterIntake": [
                    {
                      "time": "09:00 AM",
                      "amount": 400,
                      "_id": "65bb5de0169bcf9a76b1e5d5"
                    }
                  ],
                  "_id": "65bb5de0169bcf9a76b1e5d4",
                  "createdAt": "2024-02-01T09:01:20.867Z",
                  "updatedAt": "2024-02-01T09:01:20.867Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Missing fields"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "error": "Internal Server Error or specific error message"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update water intake record",
        "parameters": [
          {
            "in": "path",
            "name": "recordId",
            "type": "string",
            "required": true
          }
        ],
        "description": "Endpoint for update record of intake water",
        "tags": ["Water"],
        "requestBody": {
          "description": "Update record of intake water",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWaterIntake"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Record updated successfully",
            "content": {
              "application/json": {
                "example": {
                  "day": "1/2/2024",
                  "ownerId": "65b9566c5216d264a04e71ec",
                  "waterIntake": [
                    {
                      "time": "09:00 AM",
                      "amount": 400,
                      "_id": "65bb5de0169bcf9a76b1e5d5"
                    }
                  ],
                  "_id": "65bb5de0169bcf9a76b1e5d4",
                  "createdAt": "2024-02-01T09:01:20.867Z",
                  "updatedAt": "2024-02-01T09:01:20.867Z"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Missing fields"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "error": "Internal Server Error or specific error message"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete water intake record",
        "parameters": [
          {
            "in": "path",
            "name": "recordId",
            "type": "string",
            "required": true
          }
        ],
        "description": "Endpoint for delete record of intake water",
        "tags": ["Water"],
        "requestBody": {
          "description": "Delete record of intake water",
          "required": false,
          "content": {}
        },
        "responses": {
          "200": {
            "description": "Record deleted",
            "content": {
              "application/json": {
                "example": {
                  "day": "1/2/2024",
                  "ownerId": "65b9566c5216d264a04e71ec",
                  "waterIntake": [
                    {
                      "time": "09:00 AM",
                      "amount": 400,
                      "_id": "65bb5de0169bcf9a76b1e5d5"
                    }
                  ],
                  "_id": "65bb5de0169bcf9a76b1e5d4",
                  "createdAt": "2024-02-01T09:01:20.867Z",
                  "updatedAt": "2024-02-01T09:01:20.867Z"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "message": "No record found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "error": "Internal Server Error or specific error message"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Please enter the token"
      }
    },
    "schemas": {
      "UserRegistration": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "minLength": 6, "maxLength": 64 },
          "name": { "type": "string", "maxLength": 255 }
        },
        "example": {
          "email": "user@example.com",
          "password": "password123",
          "name": "User Name"
        }
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string" }
        },
        "example": {
          "email": "user@example.com",
          "password": "password123"
        }
      },
      "EmailDetails": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" }
        },
        "example": {
          "email": "user@example.com"
        }
      },
      "NewPasswordDetails": {
        "type": "object",
        "properties": {
          "newPassword": { "type": "string", "minLength": 8, "maxLength": 64 }
        },
        "example": {
          "newPassword": "newPassword123"
        }
      },
      "UpdateUserInformation": {
        "type": "object",
        "properties": {
          "email": { "type": "string", "format": "email" },
          "name": { "type": "string", "maxLength": 32 },
          "waterRate": { "type": "number", "minimum": 1, "maximum": 15000 },
          "avatarURL": { "type": "string" }
        },
        "example": {
          "email": "new.email@example.com",
          "name": "New Name",
          "waterRate": 5,
          "avatarURL": "https://example.com/newavatar.jpg"
        }
      },
      "UpdateUserAvatar": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "description": "URL of the user's avatar"
          }
        },
        "example": {
          "avatarURL": "https://example.com/avatar.jpg"
        }
      },
      "WaterConsumption": {
        "type": "object",
        "properties": {
          "time": { "type": "string", "required": true },
          "amount": { "type": "number", "required": true }
        }
      },
      "CreateWaterIntake": {
        "type": "object",
        "properties": {
          "time": { "type": "string" },
          "amount": { "type": "string" }
        },
        "example": { "time": "09:00 AM", "amount": "400" }
      }
    }
  }
}
